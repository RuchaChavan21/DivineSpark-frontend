{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8081/api/auth',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$response3;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n    console.error('Access forbidden');\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) >= 500) {\n    console.error('Server error:', error.response.data);\n  }\n  return Promise.reject(error);\n});\n\n// API endpoints\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  sendOTP: email => api.post('/auth/request-otp', {\n    email\n  }),\n  // FIXED\n  verifyOTP: (email, otp) => api.post('/auth/verify-otp', {\n    email,\n    otp\n  }) // ✅ matches backend\n  // logout & refreshToken only if you add them later in Spring Boot\n};\nexport const sessionsAPI = {\n  getAllSessions: params => api.get('/sessions', {\n    params\n  }),\n  getSessionById: id => api.get(`/sessions/${id}`),\n  createSession: sessionData => api.post('/sessions', sessionData),\n  updateSession: (id, sessionData) => api.put(`/sessions/${id}`, sessionData),\n  deleteSession: id => api.delete(`/sessions/${id}`),\n  bookSession: sessionId => api.post(`/sessions/${sessionId}/book`),\n  cancelBooking: sessionId => api.delete(`/sessions/${sessionId}/book`),\n  getSessionAttendees: sessionId => api.get(`/sessions/${sessionId}/attendees`)\n};\nexport const usersAPI = {\n  getCurrentUser: () => api.get('/users/me'),\n  updateProfile: userData => api.put('/users/me', userData),\n  getUserSessions: () => api.get('/users/me/sessions'),\n  getAllUsers: params => api.get('/users', {\n    params\n  }),\n  getUserById: id => api.get(`/users/${id}`),\n  updateUser: (id, userData) => api.put(`/users/${id}`, userData),\n  deleteUser: id => api.delete(`/users/${id}`)\n};\nexport const paymentsAPI = {\n  createPaymentIntent: sessionId => api.post('/payments/create-intent', {\n    sessionId\n  }),\n  confirmPayment: paymentIntentId => api.post('/payments/confirm', {\n    paymentIntentId\n  }),\n  getPaymentHistory: () => api.get('/payments/history'),\n  getPaymentById: id => api.get(`/payments/${id}`),\n  refundPayment: paymentId => api.post(`/payments/${paymentId}/refund`)\n};\nexport const adminAPI = {\n  getDashboardStats: () => api.get('/admin/stats'),\n  getAllPayments: params => api.get('/admin/payments', {\n    params\n  }),\n  getUserAnalytics: () => api.get('/admin/analytics/users'),\n  getSessionAnalytics: () => api.get('/admin/analytics/sessions'),\n  getRevenueAnalytics: () => api.get('/admin/analytics/revenue')\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$response3","status","removeItem","window","location","href","console","data","authAPI","login","credentials","post","register","userData","sendOTP","email","verifyOTP","otp","sessionsAPI","getAllSessions","params","get","getSessionById","id","createSession","sessionData","updateSession","put","deleteSession","delete","bookSession","sessionId","cancelBooking","getSessionAttendees","usersAPI","getCurrentUser","updateProfile","getUserSessions","getAllUsers","getUserById","updateUser","deleteUser","paymentsAPI","createPaymentIntent","confirmPayment","paymentIntentId","getPaymentHistory","getPaymentById","refundPayment","paymentId","adminAPI","getDashboardStats","getAllPayments","getUserAnalytics","getSessionAnalytics","getRevenueAnalytics"],"sources":["C:/Users/sujal/OneDrive/Documents/Desktop/FrontendDivineSpark/DivineSpark-frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios'\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8081/api/auth',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n})\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken')\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    return config\r\n  },\r\n  (error) => Promise.reject(error)\r\n)\r\n\r\n// Response interceptor to handle common errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('authToken')\r\n      window.location.href = '/login'\r\n    } else if (error.response?.status === 403) {\r\n      console.error('Access forbidden')\r\n    } else if (error.response?.status >= 500) {\r\n      console.error('Server error:', error.response.data)\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// API endpoints\r\nexport const authAPI = {\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  sendOTP: (email) => api.post('/auth/request-otp', { email }), // FIXED\r\n  verifyOTP: (email, otp) => api.post('/auth/verify-otp', { email, otp }), // ✅ matches backend\r\n  // logout & refreshToken only if you add them later in Spring Boot\r\n}\r\n\r\nexport const sessionsAPI = {\r\n  getAllSessions: (params) => api.get('/sessions', { params }),\r\n  getSessionById: (id) => api.get(`/sessions/${id}`),\r\n  createSession: (sessionData) => api.post('/sessions', sessionData),\r\n  updateSession: (id, sessionData) => api.put(`/sessions/${id}`, sessionData),\r\n  deleteSession: (id) => api.delete(`/sessions/${id}`),\r\n  bookSession: (sessionId) => api.post(`/sessions/${sessionId}/book`),\r\n  cancelBooking: (sessionId) => api.delete(`/sessions/${sessionId}/book`),\r\n  getSessionAttendees: (sessionId) => api.get(`/sessions/${sessionId}/attendees`),\r\n}\r\n\r\nexport const usersAPI = {\r\n  getCurrentUser: () => api.get('/users/me'),\r\n  updateProfile: (userData) => api.put('/users/me', userData),\r\n  getUserSessions: () => api.get('/users/me/sessions'),\r\n  getAllUsers: (params) => api.get('/users', { params }),\r\n  getUserById: (id) => api.get(`/users/${id}`),\r\n  updateUser: (id, userData) => api.put(`/users/${id}`, userData),\r\n  deleteUser: (id) => api.delete(`/users/${id}`),\r\n}\r\n\r\nexport const paymentsAPI = {\r\n  createPaymentIntent: (sessionId) => api.post('/payments/create-intent', { sessionId }),\r\n  confirmPayment: (paymentIntentId) => api.post('/payments/confirm', { paymentIntentId }),\r\n  getPaymentHistory: () => api.get('/payments/history'),\r\n  getPaymentById: (id) => api.get(`/payments/${id}`),\r\n  refundPayment: (paymentId) => api.post(`/payments/${paymentId}/refund`),\r\n}\r\n\r\nexport const adminAPI = {\r\n  getDashboardStats: () => api.get('/admin/stats'),\r\n  getAllPayments: (params) => api.get('/admin/payments', { params }),\r\n  getUserAnalytics: () => api.get('/admin/analytics/users'),\r\n  getSessionAnalytics: () => api.get('/admin/analytics/sessions'),\r\n  getRevenueAnalytics: () => api.get('/admin/analytics/revenue'),\r\n}\r\n\r\nexport default api\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,gCAAgC;EAC1EC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAhB,GAAG,CAACQ,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA,EAAAC,gBAAA;EACT,IAAI,EAAAF,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,MAAK,GAAG,EAAE;IAClCV,YAAY,CAACW,UAAU,CAAC,WAAW,CAAC;IACpCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC,CAAC,MAAM,IAAI,EAAAN,gBAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;IACzCK,OAAO,CAACZ,KAAK,CAAC,kBAAkB,CAAC;EACnC,CAAC,MAAM,IAAI,EAAAM,gBAAA,GAAAN,KAAK,CAACG,QAAQ,cAAAG,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,KAAI,GAAG,EAAE;IACxCK,OAAO,CAACZ,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACG,QAAQ,CAACU,IAAI,CAAC;EACrD;EACA,OAAOZ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMc,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKhC,GAAG,CAACiC,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,QAAQ,EAAGC,QAAQ,IAAKnC,GAAG,CAACiC,IAAI,CAAC,gBAAgB,EAAEE,QAAQ,CAAC;EAC5DC,OAAO,EAAGC,KAAK,IAAKrC,GAAG,CAACiC,IAAI,CAAC,mBAAmB,EAAE;IAAEI;EAAM,CAAC,CAAC;EAAE;EAC9DC,SAAS,EAAEA,CAACD,KAAK,EAAEE,GAAG,KAAKvC,GAAG,CAACiC,IAAI,CAAC,kBAAkB,EAAE;IAAEI,KAAK;IAAEE;EAAI,CAAC,CAAC,CAAE;EACzE;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG;EACzBC,cAAc,EAAGC,MAAM,IAAK1C,GAAG,CAAC2C,GAAG,CAAC,WAAW,EAAE;IAAED;EAAO,CAAC,CAAC;EAC5DE,cAAc,EAAGC,EAAE,IAAK7C,GAAG,CAAC2C,GAAG,CAAC,aAAaE,EAAE,EAAE,CAAC;EAClDC,aAAa,EAAGC,WAAW,IAAK/C,GAAG,CAACiC,IAAI,CAAC,WAAW,EAAEc,WAAW,CAAC;EAClEC,aAAa,EAAEA,CAACH,EAAE,EAAEE,WAAW,KAAK/C,GAAG,CAACiD,GAAG,CAAC,aAAaJ,EAAE,EAAE,EAAEE,WAAW,CAAC;EAC3EG,aAAa,EAAGL,EAAE,IAAK7C,GAAG,CAACmD,MAAM,CAAC,aAAaN,EAAE,EAAE,CAAC;EACpDO,WAAW,EAAGC,SAAS,IAAKrD,GAAG,CAACiC,IAAI,CAAC,aAAaoB,SAAS,OAAO,CAAC;EACnEC,aAAa,EAAGD,SAAS,IAAKrD,GAAG,CAACmD,MAAM,CAAC,aAAaE,SAAS,OAAO,CAAC;EACvEE,mBAAmB,EAAGF,SAAS,IAAKrD,GAAG,CAAC2C,GAAG,CAAC,aAAaU,SAAS,YAAY;AAChF,CAAC;AAED,OAAO,MAAMG,QAAQ,GAAG;EACtBC,cAAc,EAAEA,CAAA,KAAMzD,GAAG,CAAC2C,GAAG,CAAC,WAAW,CAAC;EAC1Ce,aAAa,EAAGvB,QAAQ,IAAKnC,GAAG,CAACiD,GAAG,CAAC,WAAW,EAAEd,QAAQ,CAAC;EAC3DwB,eAAe,EAAEA,CAAA,KAAM3D,GAAG,CAAC2C,GAAG,CAAC,oBAAoB,CAAC;EACpDiB,WAAW,EAAGlB,MAAM,IAAK1C,GAAG,CAAC2C,GAAG,CAAC,QAAQ,EAAE;IAAED;EAAO,CAAC,CAAC;EACtDmB,WAAW,EAAGhB,EAAE,IAAK7C,GAAG,CAAC2C,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;EAC5CiB,UAAU,EAAEA,CAACjB,EAAE,EAAEV,QAAQ,KAAKnC,GAAG,CAACiD,GAAG,CAAC,UAAUJ,EAAE,EAAE,EAAEV,QAAQ,CAAC;EAC/D4B,UAAU,EAAGlB,EAAE,IAAK7C,GAAG,CAACmD,MAAM,CAAC,UAAUN,EAAE,EAAE;AAC/C,CAAC;AAED,OAAO,MAAMmB,WAAW,GAAG;EACzBC,mBAAmB,EAAGZ,SAAS,IAAKrD,GAAG,CAACiC,IAAI,CAAC,yBAAyB,EAAE;IAAEoB;EAAU,CAAC,CAAC;EACtFa,cAAc,EAAGC,eAAe,IAAKnE,GAAG,CAACiC,IAAI,CAAC,mBAAmB,EAAE;IAAEkC;EAAgB,CAAC,CAAC;EACvFC,iBAAiB,EAAEA,CAAA,KAAMpE,GAAG,CAAC2C,GAAG,CAAC,mBAAmB,CAAC;EACrD0B,cAAc,EAAGxB,EAAE,IAAK7C,GAAG,CAAC2C,GAAG,CAAC,aAAaE,EAAE,EAAE,CAAC;EAClDyB,aAAa,EAAGC,SAAS,IAAKvE,GAAG,CAACiC,IAAI,CAAC,aAAasC,SAAS,SAAS;AACxE,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG;EACtBC,iBAAiB,EAAEA,CAAA,KAAMzE,GAAG,CAAC2C,GAAG,CAAC,cAAc,CAAC;EAChD+B,cAAc,EAAGhC,MAAM,IAAK1C,GAAG,CAAC2C,GAAG,CAAC,iBAAiB,EAAE;IAAED;EAAO,CAAC,CAAC;EAClEiC,gBAAgB,EAAEA,CAAA,KAAM3E,GAAG,CAAC2C,GAAG,CAAC,wBAAwB,CAAC;EACzDiC,mBAAmB,EAAEA,CAAA,KAAM5E,GAAG,CAAC2C,GAAG,CAAC,2BAA2B,CAAC;EAC/DkC,mBAAmB,EAAEA,CAAA,KAAM7E,GAAG,CAAC2C,GAAG,CAAC,0BAA0B;AAC/D,CAAC;AAED,eAAe3C,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}